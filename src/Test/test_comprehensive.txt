import { Component, OnInit, Injectable } from '@angular/core';
import { TestScheduler } from 'rxjs/testing';

@Injectable({ providedIn: 'root' })
class UserService {
  private users: string[] = ['Alice', 'Bob'];

  getUsers(): string[] {
    return [...this.users];
  }
  @Log
  save(name:string) {
    console.log("Saving...");
  }
  @Auth
  login(number:number){
    return 5;
  }
  register(name:string){
    return name;
  }

  addUser(name: string) {
    this.users.push(name);
  }
}
---------------------------------------------------------



import { Component } from '@angular/core';


//interface
export interface HousingLocation {
  id: number;
  name: string;
  city: string;
  state: string;
  photo: string;
  availableUnits: number;
  wifi: boolean;
  laundry: boolean;
}

@Component({
  selector: 'app-root',
  template: `<h1>{{ title }}</h1>`,
})
export class AppComponent {
  title: string = 'Angular Compiler Example';
  counter: number = 0;
  list: string[] = [];

  constructor() {
    if (this.counter === 0) {
      this.counter = 1;
    } else {
      this.counter = 10;
    }

    for (let i = 0; i < 3; i++) {
      this.list.push(4);
    }
  }

  increment(): void {
    this.counter += 1;
  }

  checkStatus(): string {
    if (this.counter > 5) {
      return 'High';
    } else if (this.counter > 0) {
      return 'Low';
    } else {
      return 'Zero';
    }
  }

  callService(): void {
    this.someService.logg(this.counter);
  }
}


--------------------------------- the comprehensive example


import { Component, EventEmitter, Injectable, Input, OnDestroy, OnInit, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { tick } from '@angular/core/testing';
import { Observable, of } from 'rxjs';

// Interface with all forms
export interface Product {
  id: number;
  name: string;
  price: number;
  description?: string;
  tags?: string[];
  getDiscountedPrice(discount: number): number;
  logDetails?(): void;
}


// ✅ Helper Class (with all forms)
export class ProductHelper {
  static TAX_RATE = 0.15;

  constructor(private prefix: string) {}

  public static calculateTax(price: number): number {
    return price * ProductHelper.TAX_RATE;
  }

  public formatName(name: string): string {
    return `${this.prefix}-${name.toUpperCase()}`;
  }

  private log(message: string): void {
    console.log('LOG:', message);
  }
}

// ✅ Angular Service (all forms shown)
@Injectable({
  providedIn: 'root' // <-- This is the most common form
})
export class ProductService {
  private products: Product[] = [
    {
      id: 1,
      name: 'Laptop',
      price: 1500,
      description: 'High-performance laptop',
      tags: ['tech', 'electronics'],
      getDiscountedPrice(discount: number) {
        return this.price - discount;
      },
      logDetails() {
        console.log(`${this.name}: $${this.price}`);
      }
    },
    {
      id: 2,
      name: 'Phone',
      price: 800,
      getDiscountedPrice(discount: number) {
        return this.price - discount;
      }
    }
  ];

  constructor() {
    this.logInit();
  }

  // ✅ Public method returning Observable
  public getProducts(): Observable<Product[]> {
    return of(this.products);
  }

  // ✅ Optional method for server call (mocked)
  public fetchFromServer?(): Observable<string> {
    return of('Fetched from server');
  }

  // ✅ Private method
  private logInit(): void {
    console.log('[ProductService] Initialized');
  }
}

// ✅ Standalone Component with all features
@Component({
  selector: 'app-product-item',
  standalone: true,
  template: `
    <div [class.expensive]="product.price > 1000">
      <h3>{{ product.name }}</h3>
      <p *ngIf="product.description">{{ product.description }}</p>
      <button (click)="onBuy()">Buy</button>
    </div>
  `,
  styles: [`
    .expensive {
      color: red;
      font-weight: bold;
    }
  `]
})
export class AppComponent {
  @Input() product!: Product;
  @Output() buy = new EventEmitter<number>();

  onBuy() {
    this.buy.emit(this.product.id);
  }
}

// ✅ Parent Component demonstrating other forms
@Component({
  selector: 'app-product-list',
  templateUrl: './product-list.component.html',  // ⬅️ External template
  styleUrls: ['./product-list.component.css']    // ⬅️ External styles
})
export class ProductListComponent implements OnInit, OnDestroy {
  products: Product[] = [];

  ngOnInit() {
    console.log('Component initialized');
  }

  ngOnDestroy() {
    console.log('Component destroyed');
  }

  handleBuy(productId: number) {
    console.log('Purchased product ID:', productId);
  }
}
----------------------------------------------------

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `<h1>{{ title }}</h1>`,
})
export class AppComponent {
  title: string = 'Angular Compiler Example';
  counter: number = 0;
  list: string[] = [];

  constructor() {
    if (this.counter === 0) {
      this.counter = 1;
    } else {
      this.counter = 10;
    }

    for (let i = 0; i < 3; i++) {
      this.list.push(`Item ${i}`);
    }
  }

  increment(): void {
    this.counter += 1;
  }

  checkStatus(): string {
    if (this.counter > 5) {
      return 'High';
    } else if (this.counter > 0) {
      return 'Low';
    } else {
      return 'Zero';
    }
  }

  callService(): void {
    this.someService.logg(this.counter);
  }
}


//interface
export interface HousingLocation {
  id: number;
  name: string;
  city: string;
  state: string;
  photo: string;
  availableUnits: number;
  wifi: boolean;
  laundry: boolean;
}

