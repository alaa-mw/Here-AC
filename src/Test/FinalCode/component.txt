import { Component, Injectable, OnDestroy, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule,  Router } from '@angular/router';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject } from 'rxjs';

// Product Interface
interface Product {
  id: string;
  name: string;
  image: string;
  desc: string;
}

// Product State Service
@Injectable({ providedIn: 'root' })
export class ProductState {
  private productsSubject = new BehaviorSubject<Product[]>([]);
  products$ = this.productsSubject.asObservable();

  private selectedProductSubject = new BehaviorSubject<Product | null>(null);
  selectedProduct$ = this.selectedProductSubject.asObservable();

  constructor() {
    this.initProducts();
  }

  private initProducts(): void {
    const initialProducts: Product[] = [
    {
      id: '1',
      name: 'Product 1 Camera',
      desc: 'Capture moments with this amazing camera.',
      image: 'https://images.unsplash.com/photo-1516035069371-29a1b244cc32',
    },
    {
      id: '2',
      name: 'Product 2 Laptop',
      desc: 'High performance laptop for all your needs.',
      image: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853',
    },
    {
      id: '3',
      name: 'Product 3 Wireless Headphones',
      desc: 'Experience premium sound quality wirelessly.',
      image: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e',
    },
  ];
    this.productsSubject.next(initialProducts);
  }

  selectProduct(product: Product): void {
    this.selectedProductSubject.next(product);
  }

  addProduct(product: any): void {
    const newProduct: Product = {
      ...product,
      id: Math.random().toString(36).substring(2, 9),
    };
    const updatedProducts = [...this.productsSubject.value, newProduct];
    this.productsSubject.next(updatedProducts);
  }

  deleteProduct(id: string): void {
  const updatedProducts = this.productsSubject.value.filter(p => p.id !== id);
  this.productsSubject.next(updatedProducts);
  // Clear selected product if it was deleted
  if (this.selectedProductSubject.value?.id === id) {
    this.selectedProductSubject.next(null);
  }
}

updateProduct(updatedProduct: Product): void {
  const updatedProducts = this.productsSubject.value.map(product =>
    product.id === updatedProduct.id ? updatedProduct : product
  );
  this.productsSubject.next(updatedProducts);
  this.selectedProductSubject.next(updatedProduct); // optional: update details view
}

}

// Product List Component
@Component({
  selector: 'app-product-list',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <div class="products-container">
      <div class="product-list">
        <h1>Product List</h1>
        <div
  class="product-item"
  *ngFor="let product of products$ | async"
  (click)="goToDetails(product.id)"

>
  <h3>{{ product.name }}</h3>
  <div class="product-content">
    <img [src]="product.image" alt="Product Image" />
    <div class="product-actions">
      <button (click)="editProduct($event, product)">Edit</button>
      <button (click)="deleteProduct($event, product.id)">Delete</button>
    </div>
  </div>
</div>
      </div>
      <div class="detailsSide">
        <h1>Product Details</h1>
        <div class="product-details">
          <ng-container *ngIf="selectedProduct$ | async as selectedProduct; else noProduct">
            <h2>{{ selectedProduct.name }}</h2>
            <p>{{ selectedProduct.desc }}</p>
            <img [src]="selectedProduct.image" alt="Product Image" />
          </ng-container>
          <ng-template #noProduct>
            <h2>Select a product to view details</h2>
          </ng-template>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .products-container {
      display: flex;
      gap: 20px;
      padding: 20px;
    }
    .product-list {
      flex: 1;
      max-width: 40%;
    }
    .product-item {
      border: 1px solid #ddd;
      padding: 15px;
      margin-bottom: 10px;
      cursor: pointer;
      border-radius: 5px;
      transition: background-color 0.3s;
    }
    .product-item:hover {
      background-color: #f5f5f5;
    }
    .product-item img {
      max-width: 100px;
      max-height: 100px;
      display: block;
      margin-top: 10px;
    }
    .detailsSide {
      flex: 1;
      padding: 0 20px;
    }
    .product-details {
      border: 1px solid #ddd;
      padding: 20px;
      border-radius: 5px;
    }
    .product-details img {
      max-width: 200px;
      max-height: 200px;
      margin-top: 15px;

    }
    .product-content {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-top: 10px;
}

.product-actions {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-left: 300px;
}

.product-actions button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  border-radius: 5px;
  border: none;
  transition: background-color 0.3s;
}

.product-actions button:first-child {
  background-color: #82bbf5ff;
  color: white;
}

.product-actions button:last-child {
  background-color: #f77777ff;
  color: white;
}
  `],
})
export class ProductListComponent {
  products$;
  selectedProduct$;

  constructor(private productState: ProductState,private router: Router ) {
    this.products$ = this.productState.products$;
    this.selectedProduct$ = this.productState.selectedProduct$;

  }

  goToDetails(id: string): void {
  this.router.navigate(['/product', id]);
}

  // selectProduct(product: Product): void {
  //   this.productState.selectProduct(product);
  // }

  deleteProduct(event: Event, id: string): void {
  event.stopPropagation(); // منع تفعيل selectProduct
  this.productState.deleteProduct(id);
}

editProduct(event: Event, product: Product): void {
  event.stopPropagation(); // منع تفعيل selectProduct
  // يمكن استخدام selectProduct لإعادة تعبئة النموذج
  this.productState.selectProduct(product);
  this.router.navigate(['/edit', product.id]);
}

}
@Component({
  selector: 'app-product-details',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <div *ngIf="product; else notFound">
      <h1>{{ product.name }}</h1>
      <p>{{ product.desc }}</p>
      <img [src]="product.image" alt="Product Image" width="300" />
    </div>
    <ng-template #notFound>
      <p>Product not found</p>
    </ng-template>
  `,
})
export class ProductDetailsComponent implements OnInit {
  product: Product | undefined;

  constructor(
    private route: ActivatedRoute,
    private productState: ProductState,
    private router: Router
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      const found = this.productState.products$.subscribe(products => {
        this.product = products.find(p => p.id === id);
      });
    }
  }
}
// Add Product Component
@Component({
  selector: 'app-add-product',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="add-product-form">
      <h2>Add New Product</h2>
      <form (ngSubmit)="onSubmit()">
        <div>
          <label>Name</label>
          <input [(ngModel)]="newProduct.name" name="name" required/>
        </div>
        <div>
          <label>Description</label>
          <textarea [(ngModel)]="newProduct.desc" name="desc" required></textarea>
        </div>
        <div>
          <label>Image URL</label>
          <input [(ngModel)]="newProduct.image" name="image" required/>
        </div>
        <button type="submit">{{ editingId ? 'Edit Product' : 'Add Product' }}</button>
        <button type="button" (click)="cancel()">Cancel</button>
      </form>
    </div>
  `,
  styles: [`
    .add-product-form {
      max-width: 500px;
      margin: 20px auto;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }
    .add-product-form label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    .add-product-form input,
    .add-product-form textarea {
      width: 100%;
      padding: 8px;
      margin-bottom: 15px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    .add-product-form button {
      padding: 8px 16px;
      margin-right: 10px;
      cursor: pointer;
    }
    .add-product-form button[type="submit"] {
      background-color: #4CAF50;
      color: white;
      border: none;
    }
  `],
})
export class AddProductComponent implements OnInit {
  newProduct: any = { name: '', desc: '', image: '' };
  editingId: string | null = null;

  constructor(
    private productState: ProductState,
    private router: Router,
    private route: ActivatedRoute
  ) {}

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      const id = params.get('id');
      if (id) {
        this.editingId = id;
        this.productState.products$.subscribe(products => {
          const existingProduct = products.find(p => p.id === id);
          if (existingProduct) {
            this.newProduct = {
              name: existingProduct.name,
              desc: existingProduct.desc,
              image: existingProduct.image
            };
          }
        });
      }
    });
  }

  onSubmit(): void {
    if (this.editingId) {
      this.productState.updateProduct({
        id: this.editingId,
        ...this.newProduct
      });
    } else {
      this.productState.addProduct(this.newProduct);
    }

    this.router.navigate(['/']);
  }

  cancel(): void {
    this.router.navigate(['/']);
  }
}
